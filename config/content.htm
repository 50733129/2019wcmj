<h1>第一頁</h1>
<p>content 1</p>
<p></p>
<div class="line number1 index0 alt2"><code class="html plain"></code></div>
<p><button onclick="myFunction()">按一下</button></p>
<p id="demo"></p>
<script>// <![CDATA[
function myFunction() {
  document.getElementById("demo").innerHTML = Math.floor(Math.random()*50 + 1);
 //document.getElementByld("demo").innerHTML = "不要亂按";
 //alert("不要亂按")
}
// ]]></script>
<h1>期中報告</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/n5__mXnQhR4" width="560"></iframe></p>
<h1>小遊戲</h1>
<script type="text/javascript">// <![CDATA[
var cwidth = 400;
    var cheight = 300;
    var dicex = 50;
    var dicey = 50;
    var dicewidth = 100;
    var diceheight = 100;
    var dotrad = 6;
    var ctx;
    var dx;
    var dy;
    var firstturn = true;
    var point;
function throwdice() {
    var sum;
    var ch = 1+Math.floor(Math.random()*6);
    sum = ch;
    dx = dicex;
    dy = dicey;
    drawface(ch);
    dx = dicex + 150;
    ch=1 + Math.floor(Math.random()*6);
    sum += ch;
    drawface(ch);
    if (firstturn) {
        switch(sum) {
            case 7:
            case 11:
              document.f.outcome.value="You win!";
              break;
            case 2:
            case 3:
            case 12:
              document.f.outcome.value="You lose!";
              break;
            default:
              point = sum;
              document.f.pv.value=point;
              firstturn = false;
              document.f.stage.value="Need follow-up throw.";
              document.f.outcome.value="   ";
        }
    }
    else {
        switch(sum) {
        case point:
           document.f.outcome.value="You win!";
           document.f.stage.value="Back to first throw.";
           document.f.pv.value=" ";
           firstturn = true;
           break;
        case 7:
           document.f.outcome.value="You lose!";
           document.f.stage.value="Back to first throw.";
           document.f.pv.value=" ";
           firstturn = true;
        }
            }
}
function drawface(n) {
  ctx = document.getElementById('canvas').getContext('2d');  
  ctx.lineWidth = 5;
  ctx.clearRect(dx,dy,dicewidth,diceheight);
  ctx.strokeRect(dx,dy,dicewidth,diceheight)
  var dotx;
  var doty;
  ctx.fillStyle = "#009966";
    switch(n) {
        case 1:
         draw1();
         break;
        case 2:
         draw2();
         break;
        case 3:
         draw2();
         draw1();
         break;
        case 4:
         draw4();
         break;
        case 5:
         draw4();
         draw1();
         break;
        case 6:
         draw4();
         draw2mid();
         break;
         
    }
}
function draw1() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + .5*dicewidth;
    doty = dy + .5*diceheight;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
function draw2() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+diceheight-3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
function draw4() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+diceheight-3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + diceheight-3*dotrad;  //no change
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy+ 3*dotrad;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill(); 
}
function draw2mid() {
    var dotx;
    var doty;
    ctx.beginPath();
    dotx = dx + 3*dotrad;
    doty = dy + .5*diceheight;
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    dotx = dx+dicewidth-3*dotrad;
    doty = dy + .5*diceheight; //no change
    ctx.arc(dotx,doty,dotrad,0,Math.PI*2,true);
    ctx.closePath();
    ctx.fill();
}
// ]]></script>
<p><canvas height="300" id="canvas" width="400"> Your browser doesn't support the HTML5 element canvas. </canvas> <br/> <button onclick="throwdice();">Throw dice </button></p>
<form id="f" name="f">Stage: <input name="stage" type="text" value="First Throw"/> Point: <input name="pv" type="text" value="   "/> Outcome: <input name="outcome" type="text" value="     "/>&lt;/form</form>
<h1>期末報告</h1><h2>近端配置與管理</h2>
<p>windows network setting</p>
<p>chrome proxy</p>
<p><img alt="" height="633" src="/images/chrome_PfMqjhJv5e.png" width="503"/></p>
<p><img alt="" height="319" src="/images/chrome_TM4ZE8nNs5.png" width="509"/></p>
<p>firefox proxy</p>
<p>mde.tw</p>
<p>github.com</p>
<p>portable programming system</p>
<p>portablegit - remove helper = manager</p>
<p>login github add repository - README.md</p>
<p>git clone  self-repo and CMSimfly</p>
<p>y:\home\.gitconfig</p>
<p>git config --global user.name "50733129"<br/>git config --global user.email "50733129@gm.nfu.edu.tw"<br/>git config --global http.proxy<span> </span><a href="http://140.130.17.3:3128/">http://:140.130.17.4:3128</a></p>
<p>git add .</p>
<p>git commit -m "commit description"</p>
<p>git push</p>
<p>Github Pages - setting, url</p>
<p>local python wsgi.py</p>
<p>ssh vs https (y:\home\.ssh\config)</p>
<p>.git/config (url =<span> </span><a href="mailto:git@github.com:50733129/2019wcmj.git">git@github.com:50733129/2019wcmj.git</a>)</p>
<p><br/>Roc flag</p>
<!-- 導入 Brython 標準程式庫 -->
<script src="/cmsimde/static/brython.js"></script>
<script src="/cmsimde/static/brython_stdlib.js"></script>
<p></p>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<p></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script><h2>學習心得</h2>
<p>學號:50733129 姓名:彭彥華</p>
<p>心得:</p>
<p>剛開始聽到這門課時，那時以為會很輕鬆，但在開始上課之後，覺得這真的很麻煩，起出做的時候都還跟的上，但到了第四週，建立自己的倉儲跟網站，慢慢開始卡關，原本晚上都不用來用的，但現在幾乎每個禮拜都要來，但每次只要有出問題，後面弄懂並修改完成，就會很有成就感，雖然還是有些弄不懂的。</p>
<h2>網路連線設定</h2>
<p>了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲.</p><h2>配置可攜程式環境</h2>
<p>取得 Windows 10 64 位元環境下的可攜程式環境 (下載 2019_cdb_w5.7z), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\&gt; 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\&gt; 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\&gt;cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\tmp&gt; 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \ 直接回到根目錄. 或者從 Y:\&gt; 直接使用 cd \tmp\repo\ssh\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\tmp\repo\ssh\wcm2019&gt; 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容</p><h2>倉儲改版</h2>
<p>建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版 可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令. 建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版. 另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端. git add git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容. git add 在 GIT 架構下, 是對所新增或修改的內容拍快照: git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add git commit git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. 當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息. git push git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲. 靜態 CMSimfly 利用 CMSimfly (https://github.com/chiamingyen/cmsimfly) 內容, 建立自己的 Github Pages 網站 設法利用 HTML5 CSS 與 Javascript, 納入與機械設計相關的靜態網頁內容</p><h1>國旗</h1>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<!-- 導入 Brython 標準程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<p></p>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
</script>
<p><canvas height="400" id="plotarea2" width="600"></canvas></p>
<script type="text/python">
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["plotarea2"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 255)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
</script>
<p></p>
<h1>虎科大vpn</h1>
<h6><strong>1.首次使用須先安裝SSL VPN 程式(Juniper Networks Connect) </strong></h6>
<h6>(1)請依您的作業系統版本下載使用者端程式：<a href="https://drive.narlabs.org.tw/navigate/s/8F663EC143514CF295FCB53B5B228956GUY">連結</a> </h6>
<h6> <span>(2)程式下載完成後，點擊兩下開始安裝。</span></h6>
<p><span><img alt="" height="270" src="/images/Network_Connect_for__64_bit__Windows__8_0R5_X955TLuJfO.png" width="422"/></span></p>
<div><span><strong>2. </strong><strong>進行身份驗證(可由Juniper Network Connect或IE，請擇一進行身分認證)</strong></span></div>
<div></div>
<div><span>2-1: Juniper Network Connect 應用程式認證</span></div>
<blockquote><span></span>
<div></div>
</blockquote>
<p><span>1."點選搜尋" &gt; 輸入程式名稱為Network Connect&gt; 點擊Network Connect</span></p>
<p><span><img alt="" height="690" src="/images/explorer_e9vs2LHPFX.png" width="401"/></span></p>
<p><span></span></p>
<p><span>2.執行程式後，於"登入頁面"輸入網址 : <a href="https://sslvpn.nfu.edu.tw/nfu">https://sslvpn9.twaren.net/nfu</a><span><span> </span>，後按下"執行"</span></span></p>
<p><span><img alt="" height="419" src="/images/dsNetworkConnect_awKre5Htb8.png" width="461"/><br/></span></p>
<p><span>3.輸入使用者帳號密碼，請填入校務行政AD帳號及密碼。請完整填寫您在校務行政AD帳號以及密碼，否則國網中心找不到對象進行身份確認 <br/><span>！(例: 員工編號或學號@ctx10.nfu.edu.tw）</span></span></p>
<p><span><span><img alt="" height="419" src="/images/dsNetworkConnect_nQey5PBvOZ.png" width="461"/></span></span></p>
<p><span>4.出現"設定控制-警告"視窗，按下"是</span></p>
<p><span><img alt="" height="529" src="/images/chrome_qZu6iRgVKW.png" width="762"/></span></p>
<p><span> 5.螢幕右下角顯示"已連接"，表示已成功連線。</span></p>
<p><span><img alt="" height="261" src="/images/suysrdbqjN.png" width="442"/></span></p>
<div><span>2-2: IE網認證</span></div>
<blockquote>
<div><span>1.請在IE瀏覽器上按下右鍵 使用"以系統管理員身分執行"</span></div>
<div><span>登入頁面請輸入： <a href="https://sslvpn9.twaren.net/nfu">https://sslvpn9.twaren.net/nfu</a>，按下「執行」，會出現帳號與密碼登入欄位。</span><br/><span>請填入虎尾科技大學的校務行政AD帳號及密碼，並請輸入下方驗證碼，進行身份確認。</span><br/><span><span><span>請完整填寫您在虎尾科技大學的校務行政AD帳號以及密碼</span></span>，否則國網中心找不到對象進行身份確認！</span></div>
<div><span>(例:<span><span> 員工編號或學號@ctx10.nfu.edu.tw</span></span>）</span><br/><span>填寫完畢以後按下Login登入就會開始進行身份確認，請稍後一段時間。</span></div>
<div><span><img alt="" height="681" src="/images/explorer_VWcsXL2KLA.png" width="403"/></span></div>
<div><span><img alt="" height="807" src="/images/iexplore_1yIKqch6CH.png" width="1920"/></span></div>
<div><span>2.點選「開始」 </span></div>
<div><span><img alt="" height="961" src="/images/iexplore_bpeaa2tKoq.png" width="1920"/></span></div>
<div><span>3.點選「是」，SSL VPN程式安裝完畢後，就會開始跟你的電腦建立連線，請稍後一段時間。</span></div>
<div><span><img alt="" height="419" src="/images/dwm_ESYK6i0m3G.png" width="461"/></span></div>
<div>
<blockquote>
<div><span><strong>5. </strong><strong>VPN</strong><strong>連線建立完成</strong></span></div>
</blockquote>
<blockquote><span>連線建立完成後，在電腦的工作列上(桌面右下角)，會出現 Juniper Network Connect VPN Client的圖示，表示VPN連線已經成功的建立在你的電腦上了。點擊圖示兩下，即可查看連線資訊。<span>(註:指派IP:一定為120.113.100.XX)</span>。</span><br/><span>到此，您的SSL-VPN連線已經成功的建立，不管是在家裡還是出差，您的電腦就像在學校使用一般，您可以自由的使用虎尾科技大學自己擁有的網路資源。</span></blockquote>
<blockquote><span><img alt="" height="783" src="/images/ApplicationFrameHost_IrhpsmsNhw.png" width="1254"/></span></blockquote>
</div>
</blockquote><h1>virtualBox</h1>
<p>2019/5/28</p>
<p>安裝最新版的virtualBox</p>
<p><img alt="" height="98" src="/images/explorer_ZCJT55XHYV.png" width="89"/></p>
<p><span>建立 Ubuntu 18.04 虛擬主機，並完成設定</span></p>
<p><img alt="" height="419" src="/images/VirtualBox_opnIJJ8HXe.png" width="462"/></p>
<p><span>大小需移動到</span><span>4096</span><span>MB</span></p>
<p><img alt="" height="458" src="/images/VirtualBox_ypHdVfdqSM.png" width="458"/></p>
<p><span>選擇創造一個新的</span></p>
<p><span><img alt="" height="429" src="/images/VirtualBox_SOymUoTXuV.png" width="442"/></span></p>
<p><span>選擇最上面的選項</span></p>
<p><span><img alt="" height="505" src="/images/VirtualBoxVM_ZFSLcXsUdv.png" width="482"/></span></p>
<p>ub的大小拖拉至<span>500.00GB</span>大(自行拉到500GB)</p>
<p><img alt="" height="532" src="/images/VirtualBoxVM_jiDR6mAXOj.png" width="506"/></p>
<p><span>選擇的檔案為</span><span>之前已存到隨身碟的ubuntu18.04檔案</span></p>
<p><img alt="" height="620" src="/images/VirtualBoxVM_yY4k4BmRFb.png" width="737"/></p>
<p><span><img alt="" height="380" src="/images/chrome_6UmrT4tIhc.png" width="831"/></span></p>
<p><span>以網路卡橋接啟動 Ubuntu 伺服器</span></p>
<p><span><img alt="" height="568" src="/images/chrome_53lWaK4KNO.png" width="804"/></span></p>
<p><span>以 sudo apt install nginx 安裝 nginx WWW 伺服器</span></p>
<p><span><img alt="" height="896" src="/images/chrome_oifDkl2evZ.png" width="1775"/></span></p>
<p><span>以 ifconfig 查 Ubuntu 伺服器的 IP, 測試 nginx 伺服器是否可以連線</span></p>
<p><span><img alt="" height="722" src="/images/chrome_GRSqnTPWwY.png" width="915"/></span></p>
<p><span>以 Windows 10  下的 Filezilla client, 將編輯好的 nginx 設定檔案送到 Ubuntu</span></p>
<p><span><img alt="" height="983" src="/images/phGafgS2dK.png" width="1327"/></span></p>
<p>利用 Ubuntu 指令將設定檔案搬至設定位置後, 以 /etc/init.d/nginx restart 重新啟動 nginx<br/>在 Ubuntu 中以 sudo apt install uwsgi 安裝 uwsgi<br/>在 Windows 10 編輯 uwsgi 與 nginx 所需的設定檔案, 完成後以 filezilla 送至 Ubuntu.<br/>將 CMSimfly 程式碼送到 Ubuntu 伺服器中對應目錄後.<br/>在 Ubuntu 建立 cmsimfly 服務, 並設定隨機啟動.<br/>完成後, 在 Windows 10 以瀏覽器連線至 CMSimfly, 確認動態網頁與靜態網頁可以在虛擬主機中正常啟動.<br/>以上相關網際內容管理在機械工程相關應用可參考: <a href="https://www.driveworks.co.uk/">https://www.driveworks.co.uk</a> 或 <a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a></p>
<p>以上資料均可從<a href="https://2019wcm.blogspot.com/">https://2019wcm.blogspot.com/</a>網際網路內容管理示範網誌找到</p>